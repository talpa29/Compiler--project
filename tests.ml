(* expects tag_parser to complete successfully
 * 'test' - original s-expression
 * 'expected_result' - output of (Tag_Parser.sprint_expr () (Tag_Parser.tag_parser (Reader.nt_sexpr test 0))) if tagged successfully
 * *)
 type cg_success_test = {test: string; expected_result: string};;

 (* expects tag_parser to raise exception during parsing
  * 'test' - original s-expression
  * *)
 
 let cg_success_tests = [
        {test = "#t" ; expected_result = "#t!!! Used 12202 bytes of dynamically-allocated memory"} ;
        {test = "#f" ; expected_result = "#f!!! Used 12202 bytes of dynamically-allocated memory"} ;
        {test = "((lambda (x) x) 1)" ; expected_result = "1!!! Used 12219 bytes of dynamically-allocated memory"} ;
        {test = "((lambda (x) ((lambda () x))) 2)" ; expected_result = "2!!! Used 12252 bytes of dynamically-allocated memory"} ;
        {test = "((lambda (a  b  c d . e) d ) 1 2 3 4 )" ; expected_result = "4!!! Used 12219 bytes of dynamically-allocated memory"} ;
        {test = "((lambda (a  b  . c) c ) 1 2 3 4 5)" ; expected_result = "(3 4 5)!!! Used 12270 bytes of dynamically-allocated memory"} ;
        (*{test = "(__bin-apply __bin-apply (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons __bin-apply (cons (cons cons (cons (cons #t (cons #fexpected_result = "(#t . #f)!!! Used 19874 bytes of dynamically-allocated memory"} ;
        *){test = "(reverse '(1 2 3))" ; expected_result = "(3 2 1)!!! Used 12253 bytes of dynamically-allocated memory"} ;
        {test = "(if #t 5 7)" ; expected_result = "5!!! Used 12202 bytes of dynamically-allocated memory"} ;
        {test = "((lambda (a) (if (equal? a 3) 6 a)) 3)" ; expected_result = "6!!! Used 12219 bytes of dynamically-allocated memory"} ;
        {test = "(fact 20)" ; expected_result = "2432902008176640000!!! Used 81802 bytes of dynamically-allocated memory"} ;

        ];;
 

